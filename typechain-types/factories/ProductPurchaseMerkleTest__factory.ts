/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BytesLike,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ProductPurchaseMerkleTest,
  ProductPurchaseMerkleTestInterface,
} from "../ProductPurchaseMerkleTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "address",
        name: "productsModuleAddress_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "slicerId_",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "merkleRoot_",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "Invalid",
    type: "error",
  },
  {
    inputs: [],
    name: "NotAuthorized",
    type: "error",
  },
  {
    inputs: [],
    name: "NotPurchase",
    type: "error",
  },
  {
    inputs: [],
    name: "NotSuccessful",
    type: "error",
  },
  {
    inputs: [],
    name: "WrongSlicer",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "buyerCustomData",
        type: "bytes",
      },
    ],
    name: "isPurchaseAllowed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "onProductPurchase",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60e06040523480156200001157600080fd5b5060405162001c7138038062001c718339810160408190526200003491620001fb565b8282868681600090805190602001906200005092919062000088565b5080516200006690600190602084019062000088565b5050506001600160a01b0390911660805260a05260c05250620002d592505050565b828054620000969062000299565b90600052602060002090601f016020900481019282620000ba576000855562000105565b82601f10620000d557805160ff191683800117855562000105565b8280016001018555821562000105579182015b8281111562000105578251825591602001919060010190620000e8565b506200011392915062000117565b5090565b5b8082111562000113576000815560010162000118565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200015657600080fd5b81516001600160401b03808211156200017357620001736200012e565b604051601f8301601f19908116603f011681019082821181831017156200019e576200019e6200012e565b81604052838152602092508683858801011115620001bb57600080fd5b600091505b83821015620001df5785820183015181830184015290820190620001c0565b83821115620001f15760008385830101525b9695505050505050565b600080600080600060a086880312156200021457600080fd5b85516001600160401b03808211156200022c57600080fd5b6200023a89838a0162000144565b965060208801519150808211156200025157600080fd5b50620002608882890162000144565b604088015190955090506001600160a01b03811681146200028057600080fd5b6060870151608090970151959894975095949392505050565b600181811c90821680620002ae57607f821691505b602082108103620002cf57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05161196c62000305600039600061076301526000610c6401526000610cac015261196c6000f3fe6080604052600436106100e85760003560e01c806370a082311161008a578063a22cb46511610059578063a22cb46514610274578063b88d4fde14610294578063c87b56dd146102b4578063e985e9c5146102d457600080fd5b806370a08231146101fe57806395d89b411461022c57806395db93681461024157806396238af81461026157600080fd5b8063095ea7b3116100c6578063095ea7b31461017c57806323b872dd1461019e57806342842e0e146101be5780636352211e146101de57600080fd5b806301ffc9a7146100ed57806306fdde0314610122578063081812fc14610144575b600080fd5b3480156100f957600080fd5b5061010d610108366004611209565b61031d565b60405190151581526020015b60405180910390f35b34801561012e57600080fd5b5061013761036f565b604051610119919061127e565b34801561015057600080fd5b5061016461015f366004611291565b610401565b6040516001600160a01b039091168152602001610119565b34801561018857600080fd5b5061019c6101973660046112bf565b61049b565b005b3480156101aa57600080fd5b5061019c6101b93660046112eb565b6105b0565b3480156101ca57600080fd5b5061019c6101d93660046112eb565b6105e1565b3480156101ea57600080fd5b506101646101f9366004611291565b6105fc565b34801561020a57600080fd5b5061021e61021936600461132c565b610673565b604051908152602001610119565b34801561023857600080fd5b506101376106fa565b34801561024d57600080fd5b5061010d61025c36600461140e565b610709565b61019c61026f3660046114a0565b610795565b34801561028057600080fd5b5061019c61028f3660046114d5565b61081b565b3480156102a057600080fd5b5061019c6102af366004611513565b61082a565b3480156102c057600080fd5b506101376102cf366004611291565b610862565b3480156102e057600080fd5b5061010d6102ef36600461157f565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b148061034e57506001600160e01b03198216635b5e139f60e01b145b8061036957506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461037e906115ad565b80601f01602080910402602001604051908101604052809291908181526020018280546103aa906115ad565b80156103f75780601f106103cc576101008083540402835291602001916103f7565b820191906000526020600020905b8154815290600101906020018083116103da57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b031661047f5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006104a6826105fc565b9050806001600160a01b0316836001600160a01b0316036105135760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610476565b336001600160a01b038216148061052f575061052f81336102ef565b6105a15760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610476565b6105ab838361094a565b505050565b6105ba33826109b8565b6105d65760405162461bcd60e51b8152600401610476906115e7565b6105ab838383610aaf565b6105ab8383836040518060200160405280600081525061082a565b6000818152600260205260408120546001600160a01b0316806103695760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610476565b60006001600160a01b0382166106de5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610476565b506001600160a01b031660009081526003602052604090205490565b60606001805461037e906115ad565b600080828060200190518101906107209190611638565b6040516bffffffffffffffffffffffff19606089901b166020820152909150600090603401604051602081830303815290604052805190602001209050610788827f000000000000000000000000000000000000000000000000000000000000000083610c4b565b9998505050505050505050565b600080600080600080868060200190518101906107b29190611723565b9550955095509550955095506107c786610c61565b6107d5868686868686610709565b6107f25760405163af6eefa360e01b815260040160405180910390fd5b610804846107ff60065490565b610ced565b610812600680546001019055565b50505050505050565b610826338383610d07565b5050565b61083433836109b8565b6108505760405162461bcd60e51b8152600401610476906115e7565b61085c84848484610dd5565b50505050565b6000818152600260205260409020546060906001600160a01b03166108e15760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610476565b60006108f860408051602081019091526000815290565b905060008151116109185760405180602001604052806000815250610943565b8061092284610e08565b6040516020016109339291906117a9565b6040516020818303038152906040525b9392505050565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061097f826105fc565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316610a315760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610476565b6000610a3c836105fc565b9050806001600160a01b0316846001600160a01b03161480610a775750836001600160a01b0316610a6c84610401565b6001600160a01b0316145b80610aa757506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316610ac2826105fc565b6001600160a01b031614610b265760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610476565b6001600160a01b038216610b885760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610476565b610b9360008261094a565b6001600160a01b0383166000908152600360205260408120805460019290610bbc9084906117ee565b90915550506001600160a01b0382166000908152600360205260408120805460019290610bea908490611805565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600082610c588584610f09565b14949350505050565b807f000000000000000000000000000000000000000000000000000000000000000014610ca157604051632eafdb6960e01b815260040160405180910390fd5b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610cea576040516347322d0360e01b815260040160405180910390fd5b50565b610826828260405180602001604052806000815250610f7d565b816001600160a01b0316836001600160a01b031603610d685760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610476565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610de0848484610aaf565b610dec84848484610fb0565b61085c5760405162461bcd60e51b81526004016104769061181d565b606081600003610e2f5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610e595780610e438161186f565b9150610e529050600a8361189e565b9150610e33565b60008167ffffffffffffffff811115610e7457610e74611349565b6040519080825280601f01601f191660200182016040528015610e9e576020820181803683370190505b5090505b8415610aa757610eb36001836117ee565b9150610ec0600a866118b2565b610ecb906030611805565b60f81b818381518110610ee057610ee06118c6565b60200101906001600160f81b031916908160001a905350610f02600a8661189e565b9450610ea2565b600081815b8451811015610f75576000858281518110610f2b57610f2b6118c6565b60200260200101519050808311610f515760008381526020829052604090209250610f62565b600081815260208490526040902092505b5080610f6d8161186f565b915050610f0e565b509392505050565b610f8783836110b1565b610f946000848484610fb0565b6105ab5760405162461bcd60e51b81526004016104769061181d565b60006001600160a01b0384163b156110a657604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610ff49033908990889088906004016118dc565b6020604051808303816000875af192505050801561102f575060408051601f3d908101601f1916820190925261102c91810190611919565b60015b61108c573d80801561105d576040519150601f19603f3d011682016040523d82523d6000602084013e611062565b606091505b5080516000036110845760405162461bcd60e51b81526004016104769061181d565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610aa7565b506001949350505050565b6001600160a01b0382166111075760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610476565b6000818152600260205260409020546001600160a01b03161561116c5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610476565b6001600160a01b0382166000908152600360205260408120805460019290611195908490611805565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160e01b031981168114610cea57600080fd5b60006020828403121561121b57600080fd5b8135610943816111f3565b60005b83811015611241578181015183820152602001611229565b8381111561085c5750506000910152565b6000815180845261126a816020860160208601611226565b601f01601f19169290920160200192915050565b6020815260006109436020830184611252565b6000602082840312156112a357600080fd5b5035919050565b6001600160a01b0381168114610cea57600080fd5b600080604083850312156112d257600080fd5b82356112dd816112aa565b946020939093013593505050565b60008060006060848603121561130057600080fd5b833561130b816112aa565b9250602084013561131b816112aa565b929592945050506040919091013590565b60006020828403121561133e57600080fd5b8135610943816112aa565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561138857611388611349565b604052919050565b600067ffffffffffffffff8211156113aa576113aa611349565b50601f01601f191660200190565b600082601f8301126113c957600080fd5b81356113dc6113d782611390565b61135f565b8181528460208386010111156113f157600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060c0878903121561142757600080fd5b86359550602087013594506040870135611440816112aa565b935060608701359250608087013567ffffffffffffffff8082111561146457600080fd5b6114708a838b016113b8565b935060a089013591508082111561148657600080fd5b5061149389828a016113b8565b9150509295509295509295565b6000602082840312156114b257600080fd5b813567ffffffffffffffff8111156114c957600080fd5b610aa7848285016113b8565b600080604083850312156114e857600080fd5b82356114f3816112aa565b91506020830135801515811461150857600080fd5b809150509250929050565b6000806000806080858703121561152957600080fd5b8435611534816112aa565b93506020850135611544816112aa565b925060408501359150606085013567ffffffffffffffff81111561156757600080fd5b611573878288016113b8565b91505092959194509250565b6000806040838503121561159257600080fd5b823561159d816112aa565b91506020830135611508816112aa565b600181811c908216806115c157607f821691505b6020821081036115e157634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6000602080838503121561164b57600080fd5b825167ffffffffffffffff8082111561166357600080fd5b818501915085601f83011261167757600080fd5b81518181111561168957611689611349565b8060051b915061169a84830161135f565b81815291830184019184810190888411156116b457600080fd5b938501935b838510156116d2578451825293850193908501906116b9565b98975050505050505050565b600082601f8301126116ef57600080fd5b81516116fd6113d782611390565b81815284602083860101111561171257600080fd5b610aa7826020830160208701611226565b60008060008060008060c0878903121561173c57600080fd5b86519550602087015194506040870151611755816112aa565b60608801516080890151919550935067ffffffffffffffff8082111561177a57600080fd5b6117868a838b016116de565b935060a089015191508082111561179c57600080fd5b5061149389828a016116de565b600083516117bb818460208801611226565b8351908301906117cf818360208801611226565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b600082821015611800576118006117d8565b500390565b60008219821115611818576118186117d8565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b600060018201611881576118816117d8565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826118ad576118ad611888565b500490565b6000826118c1576118c1611888565b500690565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061190f90830184611252565b9695505050505050565b60006020828403121561192b57600080fd5b8151610943816111f356fea26469706673582212203c67da97d38196a9fbe241c14b0affc7981b586bef373f17217b1b38a81bbf4664736f6c634300080d0033";

type ProductPurchaseMerkleTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProductPurchaseMerkleTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ProductPurchaseMerkleTest__factory extends ContractFactory {
  constructor(...args: ProductPurchaseMerkleTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ProductPurchaseMerkleTest";
  }

  deploy(
    name_: string,
    symbol_: string,
    productsModuleAddress_: string,
    slicerId_: BigNumberish,
    merkleRoot_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ProductPurchaseMerkleTest> {
    return super.deploy(
      name_,
      symbol_,
      productsModuleAddress_,
      slicerId_,
      merkleRoot_,
      overrides || {}
    ) as Promise<ProductPurchaseMerkleTest>;
  }
  getDeployTransaction(
    name_: string,
    symbol_: string,
    productsModuleAddress_: string,
    slicerId_: BigNumberish,
    merkleRoot_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name_,
      symbol_,
      productsModuleAddress_,
      slicerId_,
      merkleRoot_,
      overrides || {}
    );
  }
  attach(address: string): ProductPurchaseMerkleTest {
    return super.attach(address) as ProductPurchaseMerkleTest;
  }
  connect(signer: Signer): ProductPurchaseMerkleTest__factory {
    return super.connect(signer) as ProductPurchaseMerkleTest__factory;
  }
  static readonly contractName: "ProductPurchaseMerkleTest";
  public readonly contractName: "ProductPurchaseMerkleTest";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProductPurchaseMerkleTestInterface {
    return new utils.Interface(_abi) as ProductPurchaseMerkleTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ProductPurchaseMerkleTest {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ProductPurchaseMerkleTest;
  }
}
